/*
 * Copyright 2000-2023 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'base'
}

class PreparePackagesTask extends DefaultTask {
  @TaskAction
  def run() {
    ant.delete(dir: './bundled-tool')
    ant.mkdir(dir: './bundled-tool')

    def toolsPackageVersion = '2021.1.2'
    def toolsPackageId = 'JetBrains.ReSharper.CommandLineTools/' + toolsPackageVersion

    println 'Processing ' + toolsPackageId
    ant.delete(dir: './packages')
    ant.mkdir(dir: './packages')
    ant.mkdir(dir: './packages/pack')
    ant.get(src: 'https://www.nuget.org/api/v2/package/' + toolsPackageId, dest: './packages/package.zip', skipexisting: 'true')
    ant.unzip(src: './packages/package.zip', dest: './packages')
    ant.move(todir: './packages/pack', overwrite: 'true', force: 'true') {
      fileset(dir: './packages') {
        include(name: 'tools/**/*.*')
      }
    }

    ant.copy(todir: './packages', overwrite: 'true', force: 'true'){
      fileset(file: './bundled-tool.xml')
    }
    ant.move(file: './packages/bundled-tool.xml', tofile: './packages/pack/teamcity-plugin.xml', overwrite: 'true', force: 'true')

    ant.zip(destfile: './bundled-tool/jetbrains.resharper-clt.bundled.zip') {
      fileset(dir: './packages/pack') {
        include(name: '**/*.*')
      }
    }
    ant.move(file: './packages/JetBrains.ReSharper.CommandLineTools.nuspec', todir: './bundled-tool', overwrite: 'true', force: 'true')
    ant.copy(todir: './bundled-tool', overwrite: 'true', force: 'true'){
      fileset(file: './bundled-tool.xml')
    }

    ant.delete(dir: './packages')
  }
}

task preparePackagesTask(type: PreparePackagesTask)

task packageTool(type: Zip) {
  dependsOn (preparePackagesTask)
  from ('bundled-tool')
}

artifacts {
  add('default', tasks.named('packageTool'))
}
